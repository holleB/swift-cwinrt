// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Gaming.Input.h"
#include "Windows.Gaming.Input.Custom.h"
#include "Windows.System.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics __x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics;

#endif // ____x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider;

#endif // ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics;

#endif // ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory;

#if !defined(____x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    typedef struct __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl;

    interface __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

#if !defined(____x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable;

    typedef struct __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory key,
        IInspectable** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* This,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable** first,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl;

    interface __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectableVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider;

#endif // ____x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGaming_CInput_CIGameController_FWD_DEFINED__
#define ____x_ABI_CWindows_CGaming_CInput_CIGameController_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGaming_CInput_CIGameController __x_ABI_CWindows_CGaming_CInput_CIGameController;

#endif // ____x_ABI_CWindows_CGaming_CInput_CIGameController_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
#define ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CSystem_CIUser __x_ABI_CWindows_CSystem_CIUser;

#endif // ____x_ABI_CWindows_CSystem_CIUser_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CDeviceCommand __x_ABI_CWindows_CGaming_CInput_CPreview_CDeviceCommand;

typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState;

typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind;

typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel;

typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason;

typedef enum __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation;

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CDeviceCommand
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CDeviceCommand_Reset = 0,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState_Unknown = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState_Inactive = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState_Active = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState_Error = 3,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind_Unknown = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind_None = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind_Standard = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind_Rechargeable = 3,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel_Unknown = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel_Critical = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel_Low = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel_Medium = 3,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel_Full = 4,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_Unknown = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_NotCorrupt = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_TwoUpCorrupt = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_AppCorrupt = 3,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_RadioCorrupt = 4,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_EepromCorrupt = 5,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason_SafeToUpdate = 6,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetLevel
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetLevel_Off = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetLevel_Low = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetLevel_Medium = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetLevel_High = 3,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation_Geq = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation_BassBoostGain = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation_SmartMute = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation_SideTone = 3,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation_MuteLedBrightness = 4,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation_SwapMixAndVolumeDials = 5,
};

enum __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory
    {
        __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ButtonSettings = 0,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_AnalogSettings = 1,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_VibrationSettings = 2,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareShortPress = 3,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareShortPressMetaData = 4,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareShortPressMetaDataDisplay = 5,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareLongPress = 6,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareLongPressMetaData = 7,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareLongPressMetaDataDisplay = 8,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareDoublePress = 9,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareDoublePressMetaData = 10,
    __x_ABI_CWindows_CGaming_CInput_CPreview_CRemappingButtonCategory_ShareDoublePressMetaDataDisplay = 11,
};

struct __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetGeqGains
    {
        INT32 band1Gain;
    INT32 band2Gain;
    INT32 band3Gain;
    INT32 band4Gain;
    INT32 band5Gain;
};

#if !defined(____x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetParentProviderId)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This,
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider* provider,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* GetProviderId)(__x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics* This,
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider* provider,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStaticsVtbl;

    interface __x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics;
#endif /* !defined(____x_ABI_CWindows_CGaming_CInput_CPreview_CIGameControllerProviderInfoStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_BatteryChargingState)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryChargingState* value);
    HRESULT (STDMETHODCALLTYPE* get_BatteryKind)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryKind* value);
    HRESULT (STDMETHODCALLTYPE* get_BatteryLevel)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerBatteryLevel* value);
    HRESULT (STDMETHODCALLTYPE* GetDeviceFirmwareCorruptionState)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CGameControllerFirmwareCorruptReason* value);
    HRESULT (STDMETHODCALLTYPE* get_IsFirmwareCorrupted)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* IsInterfaceSupported)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        GUID interfaceId,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_IsSyntheticDevice)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_PreferredTypes)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* ExecuteCommand)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CDeviceCommand command);
    HRESULT (STDMETHODCALLTYPE* SetHomeLedIntensity)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        BYTE intensity);
    HRESULT (STDMETHODCALLTYPE* GetExtendedDeviceInfo)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        UINT32* bufferLength,
        BYTE** buffer);
    HRESULT (STDMETHODCALLTYPE* SetHeadsetOperation)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation operation,
        UINT32 bufferLength,
        BYTE* buffer);
    HRESULT (STDMETHODCALLTYPE* GetHeadsetOperation)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        enum __x_ABI_CWindows_CGaming_CInput_CPreview_CHeadsetOperation operation,
        UINT32* bufferLength,
        BYTE** buffer);
    HRESULT (STDMETHODCALLTYPE* get_AppCompatVersion)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        UINT32* value);
    HRESULT (STDMETHODCALLTYPE* SetStandardControllerButtonRemapping)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        boolean previous,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable* remapping);
    HRESULT (STDMETHODCALLTYPE* GetStandardControllerButtonRemapping)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        boolean previous,
        __x_ABI_C__FIMapView_2___x_ABI_CWindows__CGaming__CInput__CPreview__CRemappingButtonCategory_IInspectable** remapping);

        END_INTERFACE
    } __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderVtbl;

    interface __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider;
#endif /* !defined(____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromGameController)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
        __x_ABI_CWindows_CGaming_CInput_CIGameController* controller,
        __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider** legacyGipGameControllerProvider);
    HRESULT (STDMETHODCALLTYPE* FromGameControllerProvider)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
        __x_ABI_CWindows_CGaming_CInput_CCustom_CIGameControllerProvider* provider,
        __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProvider** legacyGipGameControllerProvider);
    HRESULT (STDMETHODCALLTYPE* PairPilotToCopilot)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        HSTRING pilotControllerProviderId,
        HSTRING copilotControllerProviderId);
    HRESULT (STDMETHODCALLTYPE* ClearPairing)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        HSTRING controllerProviderId);
    HRESULT (STDMETHODCALLTYPE* IsPilot)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        HSTRING controllerProviderId,
        HSTRING* copilotControllerProviderId);
    HRESULT (STDMETHODCALLTYPE* IsCopilot)(__x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics* This,
        __x_ABI_CWindows_CSystem_CIUser* user,
        HSTRING controllerProviderId,
        HSTRING* pilotControllerProviderId);

        END_INTERFACE
    } __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStaticsVtbl;

    interface __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics;
#endif /* !defined(____x_ABI_CWindows_CGaming_CInput_CPreview_CILegacyGipGameControllerProviderStatics_INTERFACE_DEFINED__) */
    
