// WARNING: Please don't edit this file. It was generated by Swift/WinRT v0.0.1

#pragma once
// Header files for imported files
#include <inspectable.h>
#include <EventToken.h>
#include <windowscontracts.h>
#include "Windows.Foundation.h"
#include "Windows.Graphics.Printing.h"
#include "Windows.Graphics.Printing.PrintTicket.h"
#include "Windows.Storage.Streams.h"
// Importing Collections header
#include "Windows.Foundation.Collections.h"

/* Forward Declarations */
#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2 __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3 __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4 __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolution_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolution_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolution_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory_FWD_DEFINED__
#define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory;

#endif // ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory_FWD_DEFINED__

// Parameterized interface forward declarations (C)

// Collection interface definitions

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

#if !defined(____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1_boolean __x_ABI_C__FIAsyncOperation_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1_boolean* This,
        boolean* result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperation_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean* This,
        __x_ABI_C__FIAsyncOperation_1_boolean* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1_boolean_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDeviceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDeviceVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDeviceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDeviceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDeviceVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDeviceVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult;

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResultVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult_INTERFACE_DEFINED__
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResultVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResultVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult_INTERFACE_DEFINED__
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType_FWD_DEFINED__

typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType;

#if !defined(____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType;

    typedef struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* put_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* handler);
    HRESULT (STDMETHODCALLTYPE* get_Completed)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
        __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType** result);
    HRESULT (STDMETHODCALLTYPE* GetResults)(__x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType** result);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl;

    interface __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType;

    typedef struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This);
        HRESULT (STDMETHODCALLTYPE* Invoke)(__x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType* asyncInfo,
        enum __x_ABI_CWindows_CFoundation_CAsyncStatus asyncStatus);

        END_INTERFACE
    } __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl;

    interface __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType
    {
        CONST_VTBL struct __x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentTypeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIAsyncOperationCompletedHandler_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_boolean __x_ABI_C__FIIterator_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_boolean;

    typedef struct __x_ABI_C__FIIterator_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_boolean* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_boolean* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_boolean* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_boolean* This,
        UINT32 itemsLength,
        boolean* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_booleanVtbl;

    interface __x_ABI_C__FIIterator_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_boolean __x_ABI_C__FIIterable_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_boolean;

    typedef struct __x_ABI_C__FIIterable_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_boolean* This,
        __x_ABI_C__FIIterator_1_boolean** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_booleanVtbl;

    interface __x_ABI_C__FIIterable_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_int __x_ABI_C__FIIterator_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_int;

    typedef struct __x_ABI_C__FIIterator_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_int* This,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_int* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_int* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_int* This,
        UINT32 itemsLength,
        INT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_intVtbl;

    interface __x_ABI_C__FIIterator_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_int __x_ABI_C__FIIterable_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_int;

    typedef struct __x_ABI_C__FIIterable_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_int* This,
        __x_ABI_C__FIIterator_1_int** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_intVtbl;

    interface __x_ABI_C__FIIterable_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1_HSTRING __x_ABI_C__FIIterator_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1_HSTRING;

    typedef struct __x_ABI_C__FIIterator_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1_HSTRING* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1_HSTRING* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterator_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1_HSTRING __x_ABI_C__FIIterable_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1_HSTRING;

    typedef struct __x_ABI_C__FIIterable_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1_HSTRING* This,
        __x_ABI_C__FIIterator_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1_HSTRINGVtbl;

    interface __x_ABI_C__FIIterable_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__
    
#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 itemsLength,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    typedef struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Key)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError** result);

        END_INTERFACE
    } __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl;

    interface __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError
    {
        CONST_VTBL struct __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        UINT32 itemsLength,
        __x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING key,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** first,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 itemsLength,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIIterator_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
typedef struct __x_ABI_CWindows_CFoundation_CDateTime __x_ABI_CWindows_CFoundation_CDateTime;

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CDateTime* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CDateTime** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIUriRuntimeClass __x_ABI_CWindows_CFoundation_CIUriRuntimeClass;

#endif // ____x_ABI_CWindows_CFoundation_CIUriRuntimeClass_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CFoundation__CUri** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIBuffer __x_ABI_CWindows_CStorage_CStreams_CIBuffer;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIBuffer_FWD_DEFINED__

#if !defined(____x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    typedef struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Current)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_HasCurrent)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* MoveNext)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl;

    interface __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    typedef struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* First)(__x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        __x_ABI_C__FIIterator_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer** result);

        END_INTERFACE
    } __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl;

    interface __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__
    
typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

#if !defined(____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError;

    typedef struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        HSTRING key,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Split)(__x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError** first,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError** second);

        END_INTERFACE
    } __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl;

    interface __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError
    {
        CONST_VTBL struct __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeErrorVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* Lookup)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING key,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* HasKey)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING key,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* Insert)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING key,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* value,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* Remove)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        HSTRING key);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);

        END_INTERFACE
    } __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_boolean __x_ABI_C__FIVectorView_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_boolean;

    typedef struct __x_ABI_C__FIVectorView_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_boolean* This,
        UINT32 index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_boolean* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_boolean* This,
        boolean value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_boolean* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        boolean* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_booleanVtbl;

    interface __x_ABI_C__FIVectorView_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_int __x_ABI_C__FIVectorView_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_int;

    typedef struct __x_ABI_C__FIVectorView_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_int* This,
        UINT32 index,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_int* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_int* This,
        INT32 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_int* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        INT32* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_intVtbl;

    interface __x_ABI_C__FIVectorView_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1_HSTRING __x_ABI_C__FIVectorView_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1_HSTRING;

    typedef struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVectorView_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__
    
#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 index,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CDateTime* items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    typedef struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** items,
        UINT32* result);

        END_INTERFACE
    } __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl;

    interface __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_boolean_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_boolean_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_boolean __x_ABI_C__FIVector_1_boolean;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_boolean;

    typedef struct __x_ABI_C__FIVector_1_booleanVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_boolean* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_boolean* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_boolean* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_boolean* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_boolean* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_boolean* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32 index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_boolean* This,
        __x_ABI_C__FIVectorView_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_boolean* This,
        boolean value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32 index,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32 index,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_boolean* This,
        boolean value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_boolean* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_boolean* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        boolean* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_boolean* This,
        UINT32 itemsLength,
        boolean* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_booleanVtbl;

    interface __x_ABI_C__FIVector_1_boolean
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_booleanVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_boolean_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_int_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_int_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_int __x_ABI_C__FIVector_1_int;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_int;

    typedef struct __x_ABI_C__FIVector_1_intVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_int* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_int* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_int* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_int* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_int* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_int* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_int* This,
        UINT32 index,
        INT32* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_int* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_int* This,
        __x_ABI_C__FIVectorView_1_int** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_int* This,
        INT32 value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_int* This,
        UINT32 index,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_int* This,
        UINT32 index,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_int* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_int* This,
        INT32 value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_int* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_int* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_int* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        INT32* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_int* This,
        UINT32 itemsLength,
        INT32* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_intVtbl;

    interface __x_ABI_C__FIVector_1_int
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_intVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_int_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1_HSTRING __x_ABI_C__FIVector_1_HSTRING;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1_HSTRING;

    typedef struct __x_ABI_C__FIVector_1_HSTRINGVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1_HSTRING* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1_HSTRING* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1_HSTRING* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1_HSTRING* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1_HSTRING* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1_HSTRING* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1_HSTRING* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1_HSTRING* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1_HSTRING* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        HSTRING* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1_HSTRING* This,
        UINT32 itemsLength,
        HSTRING* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1_HSTRINGVtbl;

    interface __x_ABI_C__FIVector_1_HSTRING
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1_HSTRINGVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1_HSTRING_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRangeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolutionVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguageVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage_INTERFACE_DEFINED__
    
#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 index,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormatVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat_INTERFACE_DEFINED__
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if !defined(____x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 index,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIVectorView_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 index,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 index,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* This,
        UINT32 itemsLength,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValueVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CDateTime* result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CDateTime** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CDateTime value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 index,
        struct __x_ABI_CWindows_CFoundation_CDateTime value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CDateTime* items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime* This,
        UINT32 itemsLength,
        struct __x_ABI_CWindows_CFoundation_CDateTime* items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTimeVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUriVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CFoundation__CUri** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUriVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUriVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri_INTERFACE_DEFINED__
    
#if !defined(____x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__)
    #define ____x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__

    typedef interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    //  Declare the parameterized interface IID.
    EXTERN_C const IID IID___x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer;

    typedef struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** result);
    HRESULT (STDMETHODCALLTYPE* get_Size)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* GetView)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer** result);
    HRESULT (STDMETHODCALLTYPE* IndexOf)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value,
        UINT32* index,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* SetAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* InsertAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 index,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAt)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 index);
    HRESULT (STDMETHODCALLTYPE* Append)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value);
    HRESULT (STDMETHODCALLTYPE* RemoveAtEnd)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
    HRESULT (STDMETHODCALLTYPE* Clear)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This);
    HRESULT (STDMETHODCALLTYPE* GetMany)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 startIndex,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** items,
        UINT32* result);
    HRESULT (STDMETHODCALLTYPE* ReplaceAll)(__x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* This,
        UINT32 itemsLength,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** items);

        END_INTERFACE
    } __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl;

    interface __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer
    {
        CONST_VTBL struct __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBufferVtbl* lpVtbl;
    };

    
    #endif // ____x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer_INTERFACE_DEFINED__
    
typedef enum __x_ABI_CWindows_CFoundation_CAsyncStatus __x_ABI_CWindows_CFoundation_CAsyncStatus;

#ifndef ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIAsyncInfo __x_ABI_CWindows_CFoundation_CIAsyncInfo;

#endif // ____x_ABI_CWindows_CFoundation_CIAsyncInfo_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
#define ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CFoundation_CIClosable __x_ABI_CWindows_CFoundation_CIClosable;

#endif // ____x_ABI_CWindows_CFoundation_CIClosable_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore;

#endif // ____x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket_FWD_DEFINED__
#define ____x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket __x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket;

#endif // ____x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIInputStream __x_ABI_CWindows_CStorage_CStreams_CIInputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIInputStream_FWD_DEFINED__

#ifndef ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
#define ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__
    typedef interface __x_ABI_CWindows_CStorage_CStreams_CIOutputStream __x_ABI_CWindows_CStorage_CStreams_CIOutputStream;

#endif // ____x_ABI_CWindows_CStorage_CStreams_CIOutputStream_FWD_DEFINED__

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason;

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind;

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind;

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit;

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource;

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus;

typedef enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat;

enum __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason
    {
        __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason_RequestEntityTooLarge = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason_AttributeNotSupported = 1,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason_AttributeValuesNotSupported = 2,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason_AttributeNotSettable = 3,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason_ConflictingAttributes = 4,
};

enum __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind
    {
        __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Unsupported = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Unknown = 1,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_NoValue = 2,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Integer = 3,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Boolean = 4,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Enum = 5,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_OctetString = 6,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_DateTime = 7,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Resolution = 8,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_RangeOfInteger = 9,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Collection = 10,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_TextWithLanguage = 11,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_NameWithLanguage = 12,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_TextWithoutLanguage = 13,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_NameWithoutLanguage = 14,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Keyword = 15,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Uri = 16,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_UriSchema = 17,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_Charset = 18,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_NaturalLanguage = 19,
    __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind_MimeMediaType = 20,
};

enum __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind
    {
        __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind_Printer = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind_FaxOut = 1,
    __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind_VirtualPrinter = 2,
};

enum __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit
    {
        __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit_DotsPerInch = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit_DotsPerCentimeter = 1,
};

enum __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource
    {
        __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource_PrintJobConfiguration = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource_PdlContent = 1,
};

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus
    {
        __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus_InstallationSucceeded = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus_PrinterAlreadyInstalled = 1,
    __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus_PrinterInstallationAccessDenied = 2,
    __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus_PrinterInstallationFailed = 3,
};
#endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat
    {
        __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat_OpenXps = 0,
    __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat_PostScript = 1,
};
#endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeErrorVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Reason)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeErrorReason* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
        HRESULT* value);
    HRESULT (STDMETHODCALLTYPE* GetUnsupportedValues)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError* This,
        __x_ABI_C__FIVectorView_1___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeErrorVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeErrorVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeError_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Kind)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CIppAttributeValueKind* value);
    HRESULT (STDMETHODCALLTYPE* GetIntegerArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_int** result);
    HRESULT (STDMETHODCALLTYPE* GetBooleanArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_boolean** result);
    HRESULT (STDMETHODCALLTYPE* GetEnumArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_int** result);
    HRESULT (STDMETHODCALLTYPE* GetOctetStringArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer** result);
    HRESULT (STDMETHODCALLTYPE* GetDateTimeArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CDateTime** result);
    HRESULT (STDMETHODCALLTYPE* GetResolutionArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution** result);
    HRESULT (STDMETHODCALLTYPE* GetRangeOfIntegerArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange** result);
    HRESULT (STDMETHODCALLTYPE* GetCollectionArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* GetTextWithLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage** result);
    HRESULT (STDMETHODCALLTYPE* GetNameWithLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage** result);
    HRESULT (STDMETHODCALLTYPE* GetTextWithoutLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetNameWithoutLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetKeywordArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetUriArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CFoundation__CUri** result);
    HRESULT (STDMETHODCALLTYPE* GetUriSchemaArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetCharsetArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetNaturalLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* GetMimeMediaTypeArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue* This,
        __x_ABI_C__FIVector_1_HSTRING** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateUnsupported)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateUnknown)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNoValue)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateInteger)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        INT32 value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateIntegerArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_int* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateBoolean)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        boolean value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateBooleanArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_boolean* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateEnum)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        INT32 value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateEnumArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_int* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateOctetString)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateOctetStringArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CStorage__CStreams__CIBuffer* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateDateTime)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        struct __x_ABI_CWindows_CFoundation_CDateTime value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateDateTimeArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CDateTime* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateResolution)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateResolutionArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppResolution* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateRangeOfInteger)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateRangeOfIntegerArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppIntegerRange* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateCollection)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* memberAttributes,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateCollectionArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* memberAttributesArray,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateTextWithLanguage)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateTextWithLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNameWithLanguage)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNameWithLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CDevices__CPrinters__CIppTextWithLanguage* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateTextWithoutLanguage)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateTextWithoutLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNameWithoutLanguage)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNameWithoutLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateKeyword)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateKeywordArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateUri)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateUriArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1___x_ABI_CWindows__CFoundation__CUri* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateUriSchema)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateUriSchemaArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateCharset)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateCharsetArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNaturalLanguage)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateNaturalLanguageArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateMimeMedia)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        HSTRING value,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* CreateMimeMediaArray)(__x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics* This,
        __x_ABI_C__FIIterable_1_HSTRING* values,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValue** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppAttributeValueStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Start)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_End)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange* This,
        INT32* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory* This,
        INT32 start,
        INT32 end,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRange** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppIntegerRangeFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrinterName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_PrinterUri)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* GetPrinterAttributesAsBuffer)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
        __x_ABI_C__FIIterable_1_HSTRING* attributeNames,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer** result);
    HRESULT (STDMETHODCALLTYPE* GetPrinterAttributes)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
        __x_ABI_C__FIIterable_1_HSTRING* attributeNames,
        __x_ABI_C__FIMap_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue** result);
    HRESULT (STDMETHODCALLTYPE* SetPrinterAttributesFromBuffer)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
        __x_ABI_CWindows_CStorage_CStreams_CIBuffer* printerAttributesBuffer,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult** result);
    HRESULT (STDMETHODCALLTYPE* SetPrinterAttributes)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice* This,
        __x_ABI_C__FIIterable_1___x_ABI_C__FIKeyValuePair_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeValue* printerAttributes,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetMaxSupportedPdfSize)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
        UINT64* result);
    HRESULT (STDMETHODCALLTYPE* GetMaxSupportedPdfVersion)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* IsPdlPassthroughSupported)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
        HSTRING pdlContentType,
        boolean* result);
    HRESULT (STDMETHODCALLTYPE* GetPdlPassthroughProvider)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2Vtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice2_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_IsIppFaxOutPrinter)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3* This,
        boolean* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3Vtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice3_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4Vtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_DeviceKind)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CIppPrintDeviceKind* value);
    HRESULT (STDMETHODCALLTYPE* get_CanModifyUserDefaultPrintTicket)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_UserDefaultPrintTicket)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
        __x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket** value);
    HRESULT (STDMETHODCALLTYPE* put_UserDefaultPrintTicket)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
        __x_ABI_CWindows_CGraphics_CPrinting_CPrintTicket_CIWorkflowPrintTicket* value);
    HRESULT (STDMETHODCALLTYPE* RefreshPrintDeviceCapabilities)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This);
    HRESULT (STDMETHODCALLTYPE* GetMaxSupportedPdlVersion)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4* This,
        HSTRING pdlContentType,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4Vtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4Vtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice4_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
        HSTRING* result);
    HRESULT (STDMETHODCALLTYPE* FromId)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
        HSTRING deviceId,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice** result);
    HRESULT (STDMETHODCALLTYPE* FromPrinterName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
        HSTRING printerName,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDevice** result);
    HRESULT (STDMETHODCALLTYPE* IsIppPrinter)(__x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics* This,
        HSTRING printerName,
        boolean* result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppPrintDeviceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppResolution_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolution_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Width)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Height)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* get_Unit)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolution* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppResolution;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppResolution_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory* This,
        INT32 width,
        INT32 height,
        enum __x_ABI_CWindows_CDevices_CPrinters_CIppResolutionUnit unit,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppResolution** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppResolutionFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Succeeded)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This,
        boolean* value);
    HRESULT (STDMETHODCALLTYPE* get_AttributeErrors)(__x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult* This,
        __x_ABI_C__FIMapView_2_HSTRING___x_ABI_CWindows__CDevices__CPrinters__CIppAttributeError** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResultVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppSetAttributesResult_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Language)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* get_Value)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage* This,
        HSTRING* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory* This,
        HSTRING language,
        HSTRING text,
        __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguage** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIIppTextWithLanguageFactory_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettingsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_OrientationSource)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource* value);
    HRESULT (STDMETHODCALLTYPE* put_OrientationSource)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource value);
    HRESULT (STDMETHODCALLTYPE* get_SizeSource)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource* value);
    HRESULT (STDMETHODCALLTYPE* put_SizeSource)(__x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CPageConfigurationSource value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettingsVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettingsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProviderVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_SupportedPdlContentTypes)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
        __x_ABI_C__FIVectorView_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* StartPrintJobWithTaskOptions)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
        HSTRING jobName,
        HSTRING pdlContentType,
        __x_ABI_CWindows_CGraphics_CPrinting_CIPrintTaskOptionsCore* taskOptions,
        __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* pageConfigurationSettings,
        __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget** result);
    HRESULT (STDMETHODCALLTYPE* StartPrintJobWithPrintTicket)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider* This,
        HSTRING jobName,
        HSTRING pdlContentType,
        __x_ABI_CWindows_CStorage_CStreams_CIInputStream* printTicket,
        __x_ABI_CWindows_CDevices_CPrinters_CIPageConfigurationSettings* pageConfigurationSettings,
        __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget** result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProviderVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProviderVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughProvider_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTargetVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrintJobId)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This,
        INT32* value);
    HRESULT (STDMETHODCALLTYPE* GetOutputStream)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This,
        __x_ABI_CWindows_CStorage_CStreams_CIOutputStream** result);
    HRESULT (STDMETHODCALLTYPE* Submit)(__x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget* This);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTargetVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTargetVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPdlPassthroughTarget_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrintSchema)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDevice_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* FromIdAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This,
        HSTRING deviceId,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CPrint3DDevice** operation);
    HRESULT (STDMETHODCALLTYPE* GetDeviceSelector)(__x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics* This,
        HSTRING* result);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPrint3DDeviceStatics_INTERFACE_DEFINED__) */
    
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchemaVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* GetDefaultPrintTicketAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType** operation);
    HRESULT (STDMETHODCALLTYPE* GetCapabilitiesAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType* constrainTicket,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType** operation);
    HRESULT (STDMETHODCALLTYPE* MergeAndValidateWithDefaultPrintTicketAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema* This,
        __x_ABI_CWindows_CStorage_CStreams_CIRandomAccessStreamWithContentType* deltaTicket,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CStorage__CStreams__CIRandomAccessStreamWithContentType** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchemaVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIPrintSchemaVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIPrintSchema_INTERFACE_DEFINED__) */
    
#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParametersVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_PrinterName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PrinterName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_OutputFileExtensions)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        __x_ABI_C__FIVector_1_HSTRING** value);
    HRESULT (STDMETHODCALLTYPE* get_SupportedInputFormats)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        __x_ABI_C__FIVector_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterSupportedFormat** value);
    HRESULT (STDMETHODCALLTYPE* get_PrintDeviceCapabilitiesPackageRelativeFilePath)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PrintDeviceCapabilitiesPackageRelativeFilePath)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_PrintDeviceResourcesPackageRelativeFilePath)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_PrintDeviceResourcesPackageRelativeFilePath)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_PreferredInputFormat)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat* value);
    HRESULT (STDMETHODCALLTYPE* put_PreferredInputFormat)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterPreferredInputFormat value);
    HRESULT (STDMETHODCALLTYPE* get_PrinterUri)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass** value);
    HRESULT (STDMETHODCALLTYPE* put_PrinterUri)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        __x_ABI_CWindows_CFoundation_CIUriRuntimeClass* value);
    HRESULT (STDMETHODCALLTYPE* get_EntryPoint)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_EntryPoint)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParametersVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParametersVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters_INTERFACE_DEFINED__) */
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResultVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_Status)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This,
        enum __x_ABI_CWindows_CDevices_CPrinters_CVirtualPrinterInstallationStatus* value);
    HRESULT (STDMETHODCALLTYPE* get_ExtendedError)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult* This,
        HRESULT* value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResultVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResultVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationResult_INTERFACE_DEFINED__) */
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStaticsVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* InstallVirtualPrinterAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* parameters,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult** operation);
    HRESULT (STDMETHODCALLTYPE* InstallVirtualPrinterAsync2)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* parameters,
        HSTRING appPackageFamilyName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult** operation);
    HRESULT (STDMETHODCALLTYPE* InstallVirtualPrinterForAllUsersAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* parameters,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult** operation);
    HRESULT (STDMETHODCALLTYPE* InstallVirtualPrinterForAllUsersAsync2)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterInstallationParameters* parameters,
        HSTRING appPackageFamilyName,
        __x_ABI_C__FIAsyncOperation_1___x_ABI_CWindows__CDevices__CPrinters__CVirtualPrinterInstallationResult** operation);
    HRESULT (STDMETHODCALLTYPE* FindAllVirtualPrinters)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* FindAllVirtualPrinters2)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        HSTRING appPackageFamilyName,
        __x_ABI_C__FIVectorView_1_HSTRING** result);
    HRESULT (STDMETHODCALLTYPE* RemoveVirtualPrinterAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        HSTRING printerName,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);
    HRESULT (STDMETHODCALLTYPE* RemoveVirtualPrinterForAllUsersAsync)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics* This,
        HSTRING printerName,
        __x_ABI_C__FIAsyncOperation_1_boolean** operation);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStaticsVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStaticsVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterManagerStatics_INTERFACE_DEFINED__) */
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* get_ContentType)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_ContentType)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
        HSTRING value);
    HRESULT (STDMETHODCALLTYPE* get_MaxSupportedVersion)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
        HSTRING* value);
    HRESULT (STDMETHODCALLTYPE* put_MaxSupportedVersion)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat* This,
        HSTRING value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat_INTERFACE_DEFINED__) */
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

#if defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)
#if !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory_INTERFACE_DEFINED__)
    #define ____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory_INTERFACE_DEFINED__
    typedef struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactoryVtbl
    {
        BEGIN_INTERFACE

        HRESULT (STDMETHODCALLTYPE* QueryInterface)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This,
            REFIID riid,
            void** ppvObject);
        ULONG (STDMETHODCALLTYPE* AddRef)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This);
        ULONG (STDMETHODCALLTYPE* Release)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This);
        HRESULT (STDMETHODCALLTYPE* GetIids)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This,
            ULONG* iidCount,
            IID** iids);
        HRESULT (STDMETHODCALLTYPE* GetRuntimeClassName)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This,
            HSTRING* className);
        HRESULT (STDMETHODCALLTYPE* GetTrustLevel)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This,
            TrustLevel* trustLevel);
        HRESULT (STDMETHODCALLTYPE* CreateInstance)(__x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory* This,
        HSTRING contentType,
        HSTRING maxSupportedVersion,
        __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormat** value);

        END_INTERFACE
    } __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactoryVtbl;

    interface __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory
    {
        CONST_VTBL struct __x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactoryVtbl* lpVtbl;
    };

    
    EXTERN_C const IID IID___x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory;
#endif /* !defined(____x_ABI_CWindows_CDevices_CPrinters_CIVirtualPrinterSupportedFormatFactory_INTERFACE_DEFINED__) */
    #endif // defined(ENABLE_WINRT_EXPERIMENTAL_TYPES)

